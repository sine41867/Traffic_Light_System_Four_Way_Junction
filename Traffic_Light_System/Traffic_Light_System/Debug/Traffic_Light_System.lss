
Traffic_Light_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  000003a0  00000434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080020a  0080020a  0000043e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc8  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad3  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088c  00000000  00000000  00001e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000878f  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000181  00000000  00000000  0000afdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000234  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	76 c1       	rjmp	.+748    	; 0x302 <__vector_5>
  16:	00 00       	nop
  18:	8c c1       	rjmp	.+792    	; 0x332 <__vector_6>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	4d c1       	rjmp	.+666    	; 0x2e0 <__vector_17>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e0 ea       	ldi	r30, 0xA0	; 160
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	aa 30       	cpi	r26, 0x0A	; 10
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	aa e0       	ldi	r26, 0x0A	; 10
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	af 30       	cpi	r26, 0x0F	; 15
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	85 d0       	rcall	.+266    	; 0x20e <main>
 104:	4b c1       	rjmp	.+662    	; 0x39c <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <InitialiseTimer1>:
	EIMSK = 0b00110000;		
}

void Disable_INT()
{
	EIMSK = 0b00000000;
 108:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 112:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 11c:	80 ed       	ldi	r24, 0xD0	; 208
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 122:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 126:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 130:	08 95       	ret

00000132 <Initialise_INT>:
 132:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 13c:	1d ba       	out	0x1d, r1	; 29
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8c bb       	out	0x1c, r24	; 28
 142:	08 95       	ret

00000144 <AllStopState>:
 144:	89 e0       	ldi	r24, 0x09	; 9
 146:	82 b9       	out	0x02, r24	; 2
 148:	85 b9       	out	0x05, r24	; 5
 14a:	08 95       	ret

0000014c <GoStateTrafficLight1>:
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	82 b9       	out	0x02, r24	; 2
 150:	89 e0       	ldi	r24, 0x09	; 9
 152:	85 b9       	out	0x05, r24	; 5
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	8b b9       	out	0x0b, r24	; 11
 158:	08 95       	ret

0000015a <GoStateTrafficLight2>:
 15a:	81 e2       	ldi	r24, 0x21	; 33
 15c:	82 b9       	out	0x02, r24	; 2
 15e:	89 e0       	ldi	r24, 0x09	; 9
 160:	85 b9       	out	0x05, r24	; 5
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	8b b9       	out	0x0b, r24	; 11
 166:	08 95       	ret

00000168 <GoStateTrafficLight3>:
 168:	89 e0       	ldi	r24, 0x09	; 9
 16a:	82 b9       	out	0x02, r24	; 2
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	85 b9       	out	0x05, r24	; 5
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	8b b9       	out	0x0b, r24	; 11
 174:	08 95       	ret

00000176 <GoStateTrafficLight4>:
 176:	89 e0       	ldi	r24, 0x09	; 9
 178:	82 b9       	out	0x02, r24	; 2
 17a:	81 e2       	ldi	r24, 0x21	; 33
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	8b b9       	out	0x0b, r24	; 11
 182:	08 95       	ret

00000184 <ReadyStateTrafficLight1>:
 184:	8b e0       	ldi	r24, 0x0B	; 11
 186:	82 b9       	out	0x02, r24	; 2
 188:	81 e3       	ldi	r24, 0x31	; 49
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	08 95       	ret

0000018e <ReadyStateTrafficLight2>:
 18e:	8e e1       	ldi	r24, 0x1E	; 30
 190:	82 b9       	out	0x02, r24	; 2
 192:	89 e0       	ldi	r24, 0x09	; 9
 194:	85 b9       	out	0x05, r24	; 5
 196:	08 95       	ret

00000198 <ReadyStateTrafficLight3>:
 198:	81 e3       	ldi	r24, 0x31	; 49
 19a:	82 b9       	out	0x02, r24	; 2
 19c:	8b e0       	ldi	r24, 0x0B	; 11
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	08 95       	ret

000001a2 <ReadyStateTrafficLight4>:
 1a2:	89 e0       	ldi	r24, 0x09	; 9
 1a4:	82 b9       	out	0x02, r24	; 2
 1a6:	8e e1       	ldi	r24, 0x1E	; 30
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	08 95       	ret

000001ac <Blinker>:
 1ac:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <YELLOW_ON>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	29 f4       	brne	.+10     	; 0x1be <Blinker+0x12>
 1b4:	12 b8       	out	0x02, r1	; 2
 1b6:	15 b8       	out	0x05, r1	; 5
 1b8:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <YELLOW_ON>
 1bc:	08 95       	ret
 1be:	82 e1       	ldi	r24, 0x12	; 18
 1c0:	82 b9       	out	0x02, r24	; 2
 1c2:	85 b9       	out	0x05, r24	; 5
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <YELLOW_ON>
 1ca:	08 95       	ret

000001cc <DisplayNumber>:
}

void DisplayNumber(int Number)
{
	PORTF = ~SEGMENT_NUMBERS[Number]; 
 1cc:	80 50       	subi	r24, 0x00	; 0
 1ce:	9e 4f       	sbci	r25, 0xFE	; 254
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	80 95       	com	r24
 1d6:	81 bb       	out	0x11, r24	; 17
 1d8:	08 95       	ret

000001da <InitialiseGeneral>:
	}
}

void InitialiseGeneral()
{
	DDRA = 0xFF;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;
 1de:	84 b9       	out	0x04, r24	; 4
	DDRE = 0x00;
 1e0:	1d b8       	out	0x0d, r1	; 13
	DDRD = 0xFF;
 1e2:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0xFF;
 1e4:	80 bb       	out	0x10, r24	; 16
	
	AllStopState();	
 1e6:	ae df       	rcall	.-164    	; 0x144 <AllStopState>
	PORTF = 0x00;
 1e8:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
 1ea:	1b b8       	out	0x0b, r1	; 11
	
	sei();					
 1ec:	78 94       	sei
	
	COUNTER = 9;
 1ee:	89 e0       	ldi	r24, 0x09	; 9
 1f0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <COUNTER>
	PREVIOUS_COUNT = 0;
 1f4:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <PREVIOUS_COUNT>
	TRAFFIC_LIGHT_NO = 1;	
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <TRAFFIC_LIGHT_NO>
	MODE = IDLE_MODE;	
 1fe:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>
	DisplayNumber(9);
 202:	89 e0       	ldi	r24, 0x09	; 9
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	e2 df       	rcall	.-60     	; 0x1cc <DisplayNumber>
	YELLOW_ON = 0;		
 208:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <YELLOW_ON>
 20c:	08 95       	ret

0000020e <main>:
	0b01101111  // 9
};

int main( void )
{
	InitialiseGeneral();
 20e:	e5 df       	rcall	.-54     	; 0x1da <InitialiseGeneral>
	Initialise_INT();
 210:	90 df       	rcall	.-224    	; 0x132 <Initialise_INT>
	InitialiseTimer1();
 212:	7a df       	rcall	.-268    	; 0x108 <InitialiseTimer1>
 214:	80 e3       	ldi	r24, 0x30	; 48
	
	EIMSK = 0b00110000;		
 216:	8d bb       	out	0x1d, r24	; 29
 218:	c9 e0       	ldi	r28, 0x09	; 9
					}
					break;
				case 2:
					if(COUNTER == 0)
					{
						COUNTER = 9;
 21a:	0f 2e       	mov	r0, r31
						GoStateTrafficLight3();
						TRAFFIC_LIGHT_NO = 3;
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	ff 2e       	mov	r15, r31
 220:	f0 2d       	mov	r31, r0
 222:	04 e0       	ldi	r16, 0x04	; 4
				case 3:
					if(COUNTER == 0)
					{
						COUNTER = 9;
						GoStateTrafficLight4();
						TRAFFIC_LIGHT_NO = 4;
 224:	11 e0       	ldi	r17, 0x01	; 1
				case 4:
					if(COUNTER == 0)
					{
						COUNTER = 9;
						GoStateTrafficLight1();
						TRAFFIC_LIGHT_NO = 1;
 226:	d2 e0       	ldi	r29, 0x02	; 2
				case 1:
					if(COUNTER == 0)
					{
						COUNTER = 9;
						GoStateTrafficLight2();
						TRAFFIC_LIGHT_NO = 2;
 228:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
	
	EIMSK = 0b00110000;		
	
    while(1)        	
    {
		if(MODE == IDLE_MODE && COUNTER != PREVIOUS_COUNT)
 22c:	81 11       	cpse	r24, r1
 22e:	0a c0       	rjmp	.+20     	; 0x244 <main+0x36>
 230:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <COUNTER>
 234:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <PREVIOUS_COUNT>
 238:	89 17       	cp	r24, r25
 23a:	b1 f3       	breq	.-20     	; 0x228 <main+0x1a>
		{
			PREVIOUS_COUNT = COUNTER;
 23c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <PREVIOUS_COUNT>
			Blinker();
 240:	b5 df       	rcall	.-150    	; 0x1ac <Blinker>
 242:	f2 cf       	rjmp	.-28     	; 0x228 <main+0x1a>
 244:	81 30       	cpi	r24, 0x01	; 1
		}
		else if(MODE == NORMAL_MODE)
 246:	81 f7       	brne	.-32     	; 0x228 <main+0x1a>
		{
			DisplayNumber(COUNTER);
 248:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <COUNTER>
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	be df       	rcall	.-132    	; 0x1cc <DisplayNumber>
 250:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <TRAFFIC_LIGHT_NO>
			
			switch(TRAFFIC_LIGHT_NO)
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	b9 f0       	breq	.+46     	; 0x286 <main+0x78>
 258:	18 f4       	brcc	.+6      	; 0x260 <main+0x52>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	31 f0       	breq	.+12     	; 0x26a <main+0x5c>
 25e:	e4 cf       	rjmp	.-56     	; 0x228 <main+0x1a>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	01 f1       	breq	.+64     	; 0x2a4 <main+0x96>
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	69 f1       	breq	.+90     	; 0x2c2 <main+0xb4>
 268:	df cf       	rjmp	.-66     	; 0x228 <main+0x1a>
 26a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <COUNTER>
			{
				case 1:
					if(COUNTER == 0)
 26e:	81 11       	cpse	r24, r1
 270:	06 c0       	rjmp	.+12     	; 0x27e <main+0x70>
					{
						COUNTER = 9;
 272:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <COUNTER>
						GoStateTrafficLight2();
 276:	71 df       	rcall	.-286    	; 0x15a <GoStateTrafficLight2>
						TRAFFIC_LIGHT_NO = 2;
 278:	d0 93 0c 02 	sts	0x020C, r29	; 0x80020c <TRAFFIC_LIGHT_NO>
 27c:	d5 cf       	rjmp	.-86     	; 0x228 <main+0x1a>
					}
					else if(COUNTER == 4)
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	99 f6       	brne	.-90     	; 0x228 <main+0x1a>
					{
						ReadyStateTrafficLight2();
 282:	85 df       	rcall	.-246    	; 0x18e <ReadyStateTrafficLight2>
 284:	d1 cf       	rjmp	.-94     	; 0x228 <main+0x1a>
					}
					break;
				case 2:
					if(COUNTER == 0)
 286:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <COUNTER>
 28a:	81 11       	cpse	r24, r1
 28c:	06 c0       	rjmp	.+12     	; 0x29a <main+0x8c>
					{
						COUNTER = 9;
 28e:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <COUNTER>
						GoStateTrafficLight3();
 292:	6a df       	rcall	.-300    	; 0x168 <GoStateTrafficLight3>
						TRAFFIC_LIGHT_NO = 3;
 294:	f0 92 0c 02 	sts	0x020C, r15	; 0x80020c <TRAFFIC_LIGHT_NO>
 298:	c7 cf       	rjmp	.-114    	; 0x228 <main+0x1a>
					}
					else if(COUNTER == 4)
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	09 f0       	breq	.+2      	; 0x2a0 <main+0x92>
 29e:	c4 cf       	rjmp	.-120    	; 0x228 <main+0x1a>
					{
						ReadyStateTrafficLight3();
 2a0:	7b df       	rcall	.-266    	; 0x198 <ReadyStateTrafficLight3>
 2a2:	c2 cf       	rjmp	.-124    	; 0x228 <main+0x1a>
					}
					break;
				case 3:
					if(COUNTER == 0)
 2a4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <COUNTER>
 2a8:	81 11       	cpse	r24, r1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <main+0xaa>
					{
						COUNTER = 9;
 2ac:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <COUNTER>
						GoStateTrafficLight4();
 2b0:	62 df       	rcall	.-316    	; 0x176 <GoStateTrafficLight4>
						TRAFFIC_LIGHT_NO = 4;
 2b2:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <TRAFFIC_LIGHT_NO>
 2b6:	b8 cf       	rjmp	.-144    	; 0x228 <main+0x1a>
					}
					else if(COUNTER == 4)
 2b8:	84 30       	cpi	r24, 0x04	; 4
 2ba:	09 f0       	breq	.+2      	; 0x2be <main+0xb0>
					{
						ReadyStateTrafficLight4();
 2bc:	b5 cf       	rjmp	.-150    	; 0x228 <main+0x1a>
 2be:	71 df       	rcall	.-286    	; 0x1a2 <ReadyStateTrafficLight4>
 2c0:	b3 cf       	rjmp	.-154    	; 0x228 <main+0x1a>
					}
					break;
				case 4:
					if(COUNTER == 0)
 2c2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <COUNTER>
 2c6:	81 11       	cpse	r24, r1
					{
						COUNTER = 9;
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <main+0xc8>
 2ca:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <COUNTER>
						GoStateTrafficLight1();
 2ce:	3e df       	rcall	.-388    	; 0x14c <GoStateTrafficLight1>
						TRAFFIC_LIGHT_NO = 1;
 2d0:	10 93 0c 02 	sts	0x020C, r17	; 0x80020c <TRAFFIC_LIGHT_NO>
 2d4:	a9 cf       	rjmp	.-174    	; 0x228 <main+0x1a>
					}
					else if(COUNTER == 4)
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0xce>
 2da:	a6 cf       	rjmp	.-180    	; 0x228 <main+0x1a>
					{
						ReadyStateTrafficLight1();
 2dc:	53 df       	rcall	.-346    	; 0x184 <ReadyStateTrafficLight1>
 2de:	a4 cf       	rjmp	.-184    	; 0x228 <main+0x1a>

000002e0 <__vector_17>:
 2e0:	1f 92       	push	r1
{
	PORTF = ~SEGMENT_NUMBERS[Number]; 
}

ISR(TIMER1_COMPA_vect) 
{	
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	8f 93       	push	r24
	COUNTER--;
 2ec:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <COUNTER>
 2f0:	81 50       	subi	r24, 0x01	; 1
 2f2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <COUNTER>
}
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_5>:

ISR(INT4_vect) 
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	8f 93       	push	r24
	EIMSK = 0b00110000;		
}

void Disable_INT()
{
	EIMSK = 0b00000000;
 30e:	1d ba       	out	0x1d, r1	; 29
}

ISR(INT4_vect) 
{
	Disable_INT();
	MODE = IDLE_MODE;
 310:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>
	PORTD = 0x00;
 314:	1b b8       	out	0x0b, r1	; 11
	COUNTER = 9;
 316:	89 e0       	ldi	r24, 0x09	; 9
 318:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <COUNTER>
	PREVIOUS_COUNT = 0;
 31c:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <PREVIOUS_COUNT>
	PORTF = 0x00;
 320:	11 ba       	out	0x11, r1	; 17
	}
}

void Enable_INT()
{
	EIMSK = 0b00110000;		
 322:	80 e3       	ldi	r24, 0x30	; 48
 324:	8d bb       	out	0x1d, r24	; 29
	PORTD = 0x00;
	COUNTER = 9;
	PREVIOUS_COUNT = 0;
	PORTF = 0x00;
	Enable_INT();
}
 326:	8f 91       	pop	r24
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_6>:

ISR(INT5_vect) 
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0b b6       	in	r0, 0x3b	; 59
 33e:	0f 92       	push	r0
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	EIMSK = 0b00110000;		
}

void Disable_INT()
{
	EIMSK = 0b00000000;
 358:	1d ba       	out	0x1d, r1	; 29
}

ISR(INT5_vect) 
{
	Disable_INT();
	COUNTER = 9;
 35a:	89 e0       	ldi	r24, 0x09	; 9
 35c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <COUNTER>
	MODE = NORMAL_MODE;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
	PREVIOUS_COUNT = 0;
 366:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <PREVIOUS_COUNT>
	TRAFFIC_LIGHT_NO = 1;
 36a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <TRAFFIC_LIGHT_NO>
	AllStopState();
 36e:	ea de       	rcall	.-556    	; 0x144 <AllStopState>
	GoStateTrafficLight1();
 370:	ed de       	rcall	.-550    	; 0x14c <GoStateTrafficLight1>
 372:	80 e3       	ldi	r24, 0x30	; 48
	}
}

void Enable_INT()
{
	EIMSK = 0b00110000;		
 374:	8d bb       	out	0x1d, r24	; 29
 376:	ff 91       	pop	r31
	PREVIOUS_COUNT = 0;
	TRAFFIC_LIGHT_NO = 1;
	AllStopState();
	GoStateTrafficLight1();
	Enable_INT();
}
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0b be       	out	0x3b, r0	; 59
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
